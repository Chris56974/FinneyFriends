/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { Wallet } from "../Wallet";

export class Wallet__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Wallet> {
    return super.deploy(overrides || {}) as Promise<Wallet>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Wallet {
    return super.attach(address) as Wallet;
  }
  connect(signer: Signer): Wallet__factory {
    return super.connect(signer) as Wallet__factory;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Wallet {
    return new Contract(address, _abi, signerOrProvider) as Wallet;
  }
}

const _abi = [
  {
    inputs: [],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balances",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "a",
        type: "uint8",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506105f8806100206000396000f3fe60806040526004361061003f5760003560e01c806327e235e314610044578063722713f714610081578063c6ab5d90146100ac578063d0e30db0146100d5575b600080fd5b34801561005057600080fd5b5061006b600480360381019061006691906103c2565b6100df565b6040516100789190610466565b60405180910390f35b34801561008d57600080fd5b506100966100ff565b6040516100a39190610466565b60405180910390f35b3480156100b857600080fd5b506100d360048036038101906100ce91906103eb565b610152565b005b6100dd6102e9565b005b60006020528060005260406000206000915054906101000a900460ff1681565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905090565b6000816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166101ab91906104c9565b60ff1610156101ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101e690610446565b60405180910390fd5b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661024691906104c9565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055503373ffffffffffffffffffffffffffffffffffffffff166108fc8260ff169081150290604051600060405180830381858888f193505050501580156102e5573d6000803e3d6000fd5b5050565b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166103409190610492565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff160217905550565b6000813590506103a781610594565b92915050565b6000813590506103bc816105ab565b92915050565b6000602082840312156103d457600080fd5b60006103e284828501610398565b91505092915050565b6000602082840312156103fd57600080fd5b600061040b848285016103ad565b91505092915050565b6000610421601483610481565b915061042c8261056b565b602082019050919050565b6104408161052f565b82525050565b6000602082019050818103600083015261045f81610414565b9050919050565b600060208201905061047b6000830184610437565b92915050565b600082825260208201905092915050565b600061049d8261052f565b91506104a88361052f565b92508260ff038211156104be576104bd61053c565b5b828201905092915050565b60006104d48261052f565b91506104df8361052f565b9250828210156104f2576104f161053c565b5b828203905092915050565b60006105088261050f565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600060ff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f7769746864726177696e6720746f6f206d756368000000000000000000000000600082015250565b61059d816104fd565b81146105a857600080fd5b50565b6105b48161052f565b81146105bf57600080fd5b5056fea2646970667358221220cbfcd3df79b016d6e29bad43ab7883900695e3b99821ab4e9122a0b913dc3e8664736f6c63430008030033";
